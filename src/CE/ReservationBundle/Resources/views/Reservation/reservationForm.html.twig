{% if showDeleteButton %}
    <div class="hidden">
        {{ form(delete_form, {'attr': {'id': 'delete_form', 'class': 'hidden'}}) }}
    </div>
{% endif %}
{{ form_start(form)}}
<div class="table-responsive panel panel-default" class="form-group form-group-sm">

    <div class="container-fluid panel-heading">
        <div class="pull-left "><h4>{{ titre }}</h4></div>
        <div class="btn-group pull-right">
            <a href="{{ path('reservation') }}" class="btn btn-sm btn-primary">Retour</a>
            {% if showDeleteButton %}
                <a onclick="document.getElementById('delete_form').submit();" href='#' class="btn btn-sm btn-warning">Supprimer</a>
            {% endif %}
            <input type="submit" value="Enregistrer"  class="btn btn-sm btn-success"/>

        </div>
    </div>
    <div >
        <input hidden="hidden" value="{{ status }}" id="status" name="status">
        {{ form_errors(form) }}
        {% if editionMode %}
            <table class="record_properties">
                <tbody>
                <tr>
                {{ include('CEReservationBundle:Reservation:reservationPrototype.html.twig', {'item': form }) }}
                </tr>
                </tbody>
            </table>
        {% else %}
            <table class="record_properties">
                <thead>
                <tr>
                    <th>Matériel</th>
                    <th>Date de début</th>
                    <th>Date de fin</th>
                    <th>Emprunteur</th>
                    <th></th>
                </tr>
                </thead>
                <tbody class="reservations" id="reservationList" data-prototype="{% filter escape %}{{ include('CEReservationBundle:Reservation:reservationPrototype.html.twig', {'item': form.reservations.vars.prototype }) }}{% endfilter %}">
                    {% for item in form.reservations %}
                    <tr>
                    {{ include('CEReservationBundle:Reservation:reservationPrototype.html.twig', {'item': item }) }}
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        {% endif %}
    </div>
   {% if not editionMode %}
        <div class="container-fluid panel-footer">
            <a href="#" class="add_resa_link btn btn-sm btn-success pull-left">+ Ajouter</a>
        </div>
   {% endif %}
</div>
{{ form_rest(form) }}
{{ form_end(form) }}

<script>

    var periodArray = [];
    var startDateParams = {
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        minDate: new Date(),
        onSelect: function (dateText, inst) {
            var endId = '#' + inst.id.replace(/startDate/g, 'endDate');
            $(endId).datepicker(endDateParams);
            $(endId).removeAttr('disabled');
            $(endId).attr('readonly','true');
            enableSubmitBtn();
        },
        beforeShowDay: function (date) {
            var endId = '#' + this.id.replace(/startDate/g, 'endDate');
            var string = jQuery.datepicker.formatDate('yy-mm-dd', date);
            var enable = true;
            var endDateVal=$(endId).value;
            if(endDateVal === undefined) {
                endDateVal=$(endId)[0].value;
            }
            endDateVal=endDateVal.split("-");
            var endDate = new Date(endDateVal[2]+"-"+endDateVal[1]+"-"+endDateVal[0]).getTime();
            {% if not editionMode %}
            if(date >= endDate)// La date de début ne doit pas être supérieur à la date de fin
            {
                return [false];
            }
            {% endif %}
            for (var period in periodArray) {
                var d1 = new Date(periodArray[period][0] * 1000);
                var d2 = new Date(periodArray[period][1] * 1000);

                if (d1 <= date && date <= d2) // Pas de date de début dans une période réservée
                {
                    enable = false;
                    break;
                }
            }
            return [enable];
        }
    };
    var endDateParams = {
        dateFormat: "dd-mm-yy",
        firstDay: 1,
        minDate: new Date(),
        beforeShowDay: function (date) {
            var enable = true;
            var startId = '#' + this.id.replace(/endDate/g, 'startDate');
            var startDateVal=$(startId).value;
            if(startDateVal === undefined) {
                startDateVal=$(startId)[0].value;
            }
            startDateVal=startDateVal.split("-");
            var startDate = new Date(startDateVal[2]+"-"+startDateVal[1]+"-"+startDateVal[0]).getTime();
            if(date <= startDate)// La date de fin ne doit pas être inférieur à la date de début
            {
                return [false];
            }
            for (var period in periodArray) {
                var d1 = new Date(periodArray[period][0] * 1000);
                var d2 = new Date(periodArray[period][1] * 1000);
                if ((d1 <= date && date <= d2) // Pas de date de fin dans une période réservée
                        || (startDate <= d1 && d2 <= date)
                ) {
                    enable = false;
                    break;
                }
            }


            return [enable];
        }
    }


    $(function() {
        $('.loading').hide();
        {% if editionMode %}
        doGetDeviceReservedPeriod($('#ce_reservationbundle_reservation_device')[0]);
        {% endif %}
        // On bind la récupération des periode reservé sur le changement de materiel
        $('#reservationList').on('change','.onChangeDevice', getDeviceReservedPeriod);
        // On bind la récupération des periode reservé sur le changement de materiel
        $('#reservationList').on('change','.enableSubmit',  enableSubmitBtn);

        // Paramétrage des datePickers
        {% if editionMode %}
        $(".startDate").on('change', function(){
            $(".endDate")[0].value = null;
        });

        {%  endif %}
    });

    // Récupère le div qui contient la collection de tags
    var collectionHolder = $('tbody.reservations');
    var $newResaLine = $('.reservations');
    jQuery(document).ready(function() {
        // ajoute l'ancre « ajouter un tag » et li à la balise ul
        collectionHolder.append($newResaLine);
        // add a delete link to all of the existing tag form li elements
        collectionHolder.children().each(function() {
            addResaFormDeleteLink($(this));
        });
        $('.add_resa_link').on('click', function(e) {
            // empêche le lien de créer un « # » dans l'URL
            e.preventDefault();
            // ajoute un nouveau formulaire tag (voir le prochain bloc de code)
            addResaForm(collectionHolder, $newResaLine);
        });
    });
    function addResaFormDeleteLink($tagFormLi) {
        var $removeFormA = $('<a class="btn btn-sm btn-danger del_resa_link" title="Supprimer"><span class="glyphicon glyphicon-remove"></span></a>');
        $tagFormLi.append($removeFormA);

        $removeFormA.on('click', function(e) {
            // prevent the link from creating a "#" on the URL
            e.preventDefault();

            // remove the li for the tag form
            $tagFormLi.remove();
        });
    }

    function addResaForm(collectionHolder, $newLinkLi) {
        // Récupère l'élément ayant l'attribut data-prototype comme expliqué plus tôt
        var prototype = collectionHolder.attr('data-prototype');

        // Remplace '__name__' dans le HTML du prototype par un nombre basé sur
        // la longueur de la collection courante
        var newForm = prototype.replace(/__name__/g, collectionHolder.children().length);

        // Affiche le formulaire dans la page dans un li, avant le lien "ajouter un tag"
        var $newFormLi = $('<tr></tr>').append(newForm);

        // On désactive le champs startDate
        $newFormLi.find('.startDate').datepicker(startDateParams);
        $newFormLi.find('.startDate').attr('disabled','');

        // On désactive le champs endDate
        $newFormLi.find('.endDate').datepicker(endDateParams);
        $newFormLi.find('.endDate').attr('disabled','');

        addResaFormDeleteLink($newFormLi);
        $newLinkLi.append($newFormLi);
        $('.loading').hide();
    }

    function getDeviceReservedPeriod() {
        doGetDeviceReservedPeriod(this);
    }
    function doGetDeviceReservedPeriod(inst) {
        var deviceId = inst.value;

        var startId = '#' + inst.id.replace(/device/g, 'startDate');
        var endId = '#' + inst.id.replace(/device/g, 'endDate');
        var loadId = '.' + inst.id.replace(/device/g, 'loading');
        $(startId).datepicker('disable');
        $(startId).attr('disabled','');
        $(startId).removeAttr('readonly');
        $(endId).datepicker('disable');
        $(endId).attr('disabled','');
        $(endId).removeAttr('readonly');
        {% if not editionMode %}
        $(startId)[0].value = null;
        $(endId)[0].value = null;
        {% endif %}
        if(deviceId==null || deviceId==""){
            return;
        }
        $(loadId).show();

        var route = "{{ path('reservation_get_reserved_period', { 'deviceId': "DEVICE_ID" }) }}";
        route = route.replace("DEVICE_ID", deviceId);
        $.ajax({
            type: 'GET',
            url: route,
            success: function (json) {
                var periodArray = json;
                $(loadId).hide();
                $(startId).datepicker(startDateParams);
                $(startId).removeAttr('disabled');
                $(startId).attr('readonly','true');
                {% if editionMode %}
                // On supprime la période actuelle
                var endDateVal = $(endId).value;
                if (endDateVal === undefined) {
                    endDateVal = $(endId)[0].value;
                }
                endDateVal=endDateVal.split("-");
                var endDate = new Date(endDateVal[0]+"/"+endDateVal[1]+"/"+endDateVal[2]).getTime();
                var startDateVal = $(startId).value;
                if (startDateVal === undefined) {
                    startDateVal = $(startId)[0].value;
                }
                startDateVal=startDateVal.split("-");
                var startDate = new Date(startDateVal[0]+"/"+startDateVal[1]+"/"+startDateVal[2]).getTime();
                for (var period in periodArray) {
                    var d1 = periodArray[period][0] * 1000;
                    var d2 = periodArray[period][1] * 1000;
                    if ((d1 == startDate && d2 == endDate)) {
                        periodArray.splice(period, 1)
                        break;
                    }
                }
                {% endif %}
            },
            error: function () {
                $(loadId).hide();
            }
        });
        return false;
    }
    function enableSubmitBtn(){
        var inputs, index, enableSubmit;
        enableSubmit = true;

        // Find its child `input` elements
        inputs = $('form[name="ce_reservationbundle_list_reservation"] :input');
        for (index = 0; index < inputs.length; ++index) {
            // deal with inputs[index] element.
            if(inputs[index].value==null || inputs[index].value==''){
                enableSubmit = false;
            }
        }
        if (enableSubmit){
            $("input[type=submit]").removeAttr('disabled');
        } else {
            $("input[type=submit]").attr('disabled','');

        }
    }
</script>